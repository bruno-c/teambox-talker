#!/usr/bin/env ruby
require 'optparse'

options = {
  :host        => "0.0.0.0",
  :port        => 61800,
  :requests    => 1,
  :concurrency => 1,
  :size        => 256,
  :debug       => false
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on("-h", "--host HOST", "Server host")               { |host| options[:host] = host }
  opts.on("-p", "--port NUM", "Server port")                { |port| options[:port] = port.to_i }
  opts.on("-n", "--requests NUM", "Number of requests")     { |num| options[:requests] = num.to_i }
  opts.on("-c", "--concurrency EXP", "Concurrency levels")  { |exp| options[:concurrency] = exp.to_i }
  opts.on("-s", "--size NUM", "Message size")               { |size| options[:size] = size.to_i }
  opts.on("-d", "--debug", "Debug mode")                    { options[:debug] = true }
  
  opts.on_tail("-h", "--help", "Show this message")         { puts opts; exit }
end.parse!(ARGV)

$:.unshift File.dirname(__FILE__) + "/../lib"
require "rubygems"
require "talker"

size = EM.set_descriptor_table_size(1024 * 4)
puts "Max connections is #{size}"

EM.run do
  message = "x" * options[:size]
  start = Time.now
  clients_done = 0
  requests_done = Hash.new(0)
  
  puts "%d clients sending %d messages each, %d messages total" % [options[:concurrency], options[:requests], options[:concurrency] * options[:requests]]
  puts "Starting test ..."

  options[:concurrency].times do |i|
    Talker::Client.connect(options[:host], options[:port], "room", "user#{i}", "token") do |client|
      client.on_open do
        puts "user#{i} connected" if options[:debug]
        options[:requests].times do
          EM.next_tick { client.send_message(message) }
        end
      end
      
      client.on_message do |message|
        # Wait to receive all messages
        if message["type"] == "message" && message["from"] == "user#{i}"
          requests_done["user#{i}"] += 1
          puts "%s received message %d from %s" % ["user#{i}", requests_done["user#{i}"], message["from"]] if options[:debug]
        end
        if requests_done["user#{i}"] == options[:requests]
          client.close
        end
      end
      
      client.on_close do
        clients_done += 1
        puts "user#{i} done" if options[:debug]
        if clients_done == options[:concurrency]
          time = Time.now - start
          messages = options[:requests] * options[:concurrency]
          puts "Done!"
          puts
          puts "  Finished in %f sec" % time
          puts "  %0.2f messages/sec" % (messages.to_f / time.to_f)
          puts
          
          EM.add_timer(1) { EM.stop }
        end
      end
    end
  end
end