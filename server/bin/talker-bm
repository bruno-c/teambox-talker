#!/usr/bin/env ruby
require 'optparse'

options = {
  :host        => "0.0.0.0",
  :port        => 61800,
  :requests    => 1,
  :clients     => 1,
  :room        => "bm",
  :size        => 256,
  :debug       => false
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on("-a", "--host HOST", "Server host")               { |host| options[:host] = host }
  opts.on("-p", "--port NUM", "Server port")                { |port| options[:port] = port.to_i }
  opts.on("-n", "--requests NUM", "Number of requests")     { |num| options[:requests] = num.to_i }
  opts.on("-c", "--clients EXP", "Number of clients")       { |num| options[:clients] = num.to_i }
  opts.on("-s", "--size NUM", "Message size")               { |size| options[:size] = size.to_i }
  opts.on("-r", "--room NAME", "Room name")                 { |name| options[:room] = name }
  opts.on("-d", "--debug", "Debug mode")                    { options[:debug] = true }
  
  opts.on_tail("-h", "--help", "Show this message")         { puts opts; exit }
end.parse!(ARGV)

$:.unshift File.dirname(__FILE__) + "/../lib"
require "rubygems"
require "talker"

size = EM.set_descriptor_table_size(1024 * 4)
puts "Descriptor table size set to #{size}"

EM.run do
  message = "x" * options[:size]
  start = nil
  clients_done = 0
  requests_done = Hash.new(0)
  messages = 0
  
  puts "%d clients sending %d messages each" % [options[:clients], options[:requests]]
  puts "%d messages per room" % [options[:clients] * options[:requests]]
  puts "Starting test ..."
  
  options[:clients].times do |i|
    Talker::Client.connect({:user => {:id => i, :name => "-user#{i}"}, :token => "token"}.merge(options)) do |client|
      user_name = options[:room] + "-user#{i}"
      
      client.on_connected do
        puts "#{user_name} connected" if options[:debug]
        start ||= Time.now # start timer only when connected, we're mesuring messages here...
        options[:requests].times do
          EM.next_tick { client.send_message(message) }
        end
      end
    
      client.on_message do |user, message|
        messages += 1
        if message["type"] == "message" && message["from"] == user_name
          requests_done[user_name] += 1
        end
        puts "%s received message %d from %s" % [user_name, requests_done[user_name], user.name] if options[:debug]
        # Wait to receive all messages
        if requests_done[user_name] == options[:requests]
          client.close
        end
      end
    
      client.on_close do
        clients_done += 1
        puts "#{user_name} done" if options[:debug]
        if clients_done == options[:clients]
          time = Time.now - start
          puts "Done!"
          puts
          puts "  Finished in %f sec" % time
          puts "  %0.2f messages/sec" % (messages.to_f / time.to_f)
          puts
        
          EM.add_timer(1) { EM.stop }
        end
      end
    end
  end
end