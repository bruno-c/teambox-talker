#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + "/../lib"
require "rubygems"
require "talker"
require "eventmachine"

abort "usage: talker-client <room> <user_id> <user_name> <auth token>" if ARGV.empty?

room, user_id, user_name, token = ARGV[0..3]

module KeyboardInput
  include EM::Protocols::LineText2
  
  attr_accessor :client
  
  def receive_line(data)
    case data
    when "/close"
      @client.close
    when "/who", "/users"
      puts @client.users.map { |id, u| u.name }.join(", ") + " are online"
    else
      @client.send_message(data)
    end
  end
end

EM.run do
  Talker::Client.connect(:room => room.to_i, :user => {:id => user_id.to_i, :name => user_name}, :token => token) do |client|
    # client.debug = true
    
    client.on_join do |user|
      puts "#{user.name} joins"
    end

    client.on_leave do |user|
      puts "#{user.name} left"
    end
    
    client.on_message do |user, message|
      puts "#{user.name}: #{message}"
    end
    
    client.on_close do
      puts "disconnected"
      EM.stop
      exit
    end
    
    EM.open_keyboard(KeyboardInput) { |i| i.client = client }
    trap("INT") { EM.stop }
  end
end