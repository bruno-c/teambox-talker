#!/usr/bin/env ruby
require 'optparse'

host = "0.0.0.0"
port = 61800
amqp_host = "0.0.0.0"
amqp_port = 5672
trace = false
descriptor_table_size = 1024 * 4

OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on("-a", "--host HOST", "Server host")               { |h| host = h }
  opts.on("-p", "--port NUM", "Server port")                { |n| port = n.to_i }
  opts.on("-A", "--amqp-host HOST", "AMQP host")            { |h| amqp_host = h }
  opts.on("-P", "--amqp-port NUM", "AMQP port")             { |n| amqp_port = n.to_i }
  opts.on("-t", "--trace", "Output connections info")       { trace = true }
  opts.on("-s", "--descriptors", "Set descriptor table size")  { |n| descriptor_table_size = n.to_i }
  
  opts.on_tail("-h", "--help", "Show this message")         { puts opts; exit }
end.parse!(ARGV)


$:.unshift File.dirname(__FILE__) + "/../lib"
require "rubygems"
require "talker"
require "amqp"

size = EM.set_descriptor_table_size(descriptor_table_size)
puts "Descriptor table size set to #{size}"

EM.run do
  puts "Connected to AMQP on #{amqp_host}:#{amqp_port}"
  AMQP.connect :host => amqp_host, :port => amqp_port
  
  server = Talker::Server.new(:host => host, :port => port, :authenticator => Talker::NullAuthenticator.new)
  server.logger = Logger.new(STDOUT) if trace
  trap('INT') do
    puts "Stopping ..."
    server.stop
    # FIXME hang
    #AMQP.stop { EM.stop }
    EM.stop
  end
  
  $0 = "talker:#{server.port}"
  puts "Listening on #{server.host}:#{server.port}"
  server.start
end